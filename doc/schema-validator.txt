*schema-validator.txt*                             Last change: 2025 August 14

==============================================================================
Table of Contents                         *schema-validator-table-of-contents*

API ................................................... |schema-validator-api|
`validate` ....................................... |schema-validator-validate|
`assert` ........................................... |schema-validator-assert|
`notify_assert` ............................. |schema-validator-notify_assert|
Examples ......................................... |schema-validator-examples|
Values compared with the `type` function  |schema-validator-values-compared-with-the-`type`-function|
Tables with an arbitrary number of items  |schema-validator-tables-with-an-arbitrary-number-of-items|
Tables with a set number of items  |schema-validator-tables-with-a-set-number-of-items|
`exact` ............................................. |schema-validator-exact|
Optional ......................................... |schema-validator-optional|
Any ................................................... |schema-validator-any|
Custom validators ....................... |schema-validator-custom-validators|
`literal` ......................................... |schema-validator-literal|
`union` ............................................. |schema-validator-union|

==============================================================================
SCHEMA-VALIDATOR.NVIM                 *schema-validator-schema-validator.nvim*


Runtime schema-validation built with Neovim's Lua utilities.


------------------------------------------------------------------------------
API                                                     *schema-validator-api*



                                                                              
`VALIDATE`                                         *schema-validator-validate*

`validate` will return false and when the `val` does not match the `schema`,
otherwise `true`.

>lua
    --- @alias CustomValidator fun(val: any): boolean
    --- @alias Type "nil" | "number" | "string" | "boolean" | "function" | "table" | "any" | CustomValidator
    
    --- @class BaseSchema
    --- @field type Type
    --- @field optional? boolean
    
    --- @class TableSchema : BaseSchema
    --- @field entries? Type | Schema[]
    --- @field exact? boolean
    
    --- @alias Schema BaseSchema | TableSchema
    
    --- @param schema Schema
    --- @param val any
    --- @return boolean
    validate(schema, val)
<

                                                                              
`ASSERT`                                             *schema-validator-assert*

`assert` will throw an error when the `val` does not match the `schema`,
similar to the native `assert`.

>lua
    --- @class AssertOpts
    --- @field name string
    --- @field schema Schema
    --- @field val any
    
    --- @param opts AssertOpts
    assert(opts)
<

                                                                              
`NOTIFY_ASSERT`                               *schema-validator-notify_assert*

`notify_assert` will return false and call `vim.notify` when the `val` does
not match the `schema`, otherwise `true`.

>lua
    --- @class AssertOpts
    --- @field name string
    --- @field schema Schema
    --- @field val any
    
    --- @param opts AssertOpts
    notify_assert(opts)
<

------------------------------------------------------------------------------
EXAMPLES                                           *schema-validator-examples*


  All examples return `true` unless otherwise noted


                                                                              
VALUES COMPARED WITH THE `TYPE` FUNCTION*schema-validator-values-compared-with-the-`type`-function*

>lua
    validate({ type = "nil", }, nil)
    validate({ type = "number", }, 123)
    validate({ type = "string", }, "hello")
    validate({ type = "boolean", }, true)
    validate({ type = "function", }, function() end)
<

                                                                              
TABLES WITH AN ARBITRARY NUMBER OF ITEMS*schema-validator-tables-with-an-arbitrary-number-of-items*

>lua
    validate(
      {
        type = "table",
        entries = "number",
      },
      { 1, 2, 3, 4, }
    )
<

                                                                              
TABLES WITH A SET NUMBER OF ITEMS*schema-validator-tables-with-a-set-number-of-items*

>lua
    validate(
      {
        type = "table",
        entries = {
          first = { type = "string", },
          { type = "number", },
        },
      },
      { first = "hello", 123, }
    )
    validate(
      {
        type = "table",
        entries = {
          first = { type = "string", },
          { type = "number", },
        },
      },
      { first = "hello", 123, "there" } -- default behavior is to return `true` for tables which include more items than its schema
    )
<

                                                                              
`EXACT`                                               *schema-validator-exact*

>lua
    validate(
      {
        type = "table",
        entries = {
          first = { type = "string", },
          { type = "number", },
        },
        exact = true
      },
      { first = "hello", 123, "there" } -- returns `false`
    )
<

                                                                              
OPTIONAL                                           *schema-validator-optional*

>lua
    validate({ type = "number", optional = true }, nil)
    validate(
      {
        type = "table",
        entries = {
          first = { type = "string", optional = true },
          { type = "number", },
        },
      },
      { first = nil, 123, } -- `optional` can either mean the value of the entry
    )
    validate(
      {
        type = "table",
        entries = {
          first = { type = "string", optional = true },
          { type = "number", },
        },
      },
      { nil, 123, } -- or `optional` can mean the entry itself. No way to differentiate between the two in lua
    )
<

                                                                              
ANY                                                     *schema-validator-any*

>lua
    validate({ type = "any", }, --[[returns true for anything]] )
<

                                                                              
CUSTOM VALIDATORS                         *schema-validator-custom-validators*

>lua
    -- a function that takes the value to be validated as an argument and returns a boolean
    validate({ type = function(val) return val % 2 == 0 end, }, 2)
<

                                                                              
`LITERAL`                                           *schema-validator-literal*

>lua
    validate({ type = literal "hello", }, "hello")
    validate({ type = literal { 1, 2, 3 }, }, { 1, 2, 3, })
<

                                                                              
`UNION`                                               *schema-validator-union*

>lua
    validate(
      {
        type = union {
          { type = "string", },
          { type = "boolean", },
        },
      },
      "hello"
    )
    validate(
      {
        type = union {
          { type = "string", },
          { type = "boolean", },
        },
      },
      true
    )
<

vim:tw=78:ts=8:ft=help:norl: